%{
open GCLTypesAST
%}

%token <string> X

%token <float> NUM
%token <bool> BOOL
%token <string> ERR
%token TIMES DIV PLUS MINUS POW LPAR RPAR MOD EOF 
// bools
%token OR AND NOT EQUAL NOT_EQUAL GREATER SMALLER EQ_GREATER EQ_SMALLER B_LPAR B_RPAR LBRAC RBRAC
%token COLON ARROW SKIP SEMI_COLON IF FI DO OD CONTINUE BREAK TRY CATCH YRT THROW HC_RBRAC HC_LBRAC COND_AND COND_OR
%token ASSIGN C_LBRAC C_RBRAC GC_BRAC


// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <CExpr> start
%type <arithmeticExpr> expressionA0
%type <arithmeticExpr> expressionA1
%type <arithmeticExpr> expressionA2
%type <arithmeticExpr> expressionA3
%type <boolExpr> expressionB0
%type <boolExpr> expressionB1
%type <boolExpr> expressionB2
%type <CExpr> expressionC0
%type <GCExpr> expressionGC0


// Grammar productions
%%

// The first production in "formal" notation is
// start -> expressionC0
// here written:
start: expressionC0 EOF             { $1 }
//Start with C expressions

//boolean
expressionB0:
  | expressionB0 AND expressionB0      {AndExpr($1,$3)}
  | expressionB0 OR expressionB0       {OrExpr($1,$3)}
  | expressionB0 COND_AND expressionB0      {CondAndExpr($1,$3)}
  | expressionB0 COND_OR expressionB0       {CondOrExpr($1,$3)}
  | NOT expressionB0                    {NotExpr($2)}
  | expressionB1                        {$1}

expressionB1:
  | BOOL                                {Bool($1)}
  | B_LPAR expressionB0 B_RPAR          { $2 }
  | expressionB2                        {$1}

expressionB2:
  | expressionA0 GREATER expressionA0    { GreaterExpr($1,$3)}
  | expressionA0 EQ_GREATER expressionA0    { EqGreaterExpr($1,$3)}
  | expressionA0 SMALLER expressionA0    { SmallerExpr($1,$3)}
  | expressionA0 EQ_SMALLER expressionA0    { EqSmallerExpr($1,$3)}
  | expressionA0 EQUAL expressionA0      { EqualExpr($1,$3)}
  | expressionA0 NOT_EQUAL expressionA0  { NotEqualExpr($1,$3)}

//arithmetic
expressionA0:
  | expressionA0 PLUS expressionA0    { PlusExpr($1,$3) }
  | expressionA0 MINUS expressionA0   { MinusExpr($1,$3) }
  | expressionA1                       { $1 }

expressionA1:
  | expressionA1 TIMES expressionA1   { TimesExpr($1,$3) }
  | expressionA1 DIV expressionA1     { DivExpr($1,$3) }
  | expressionA1 MOD expressionA1     { ModExpr($1,$3) }
  | expressionA2                      { $1 }

expressionA2:
  | expressionA3 POW expressionA2      { PowExpr($1,$3) }
  | expressionA3                       { $1 }

expressionA3:
  | X LBRAC expressionA0 RBRAC      { ArrayExpr($1,$3) }
  | PLUS expressionA3               { UPlusExpr($2) }
  | MINUS expressionA3              { UMinusExpr($2) }
  | NUM                             { Num($1) }
  | X                               { Var($1)}
  | LPAR expressionA0 RPAR          { $2 }

//Guarded command
expressionGC0:  
  | expressionGC0 GC_BRAC expressionGC0  { GCLoopExpr($1, $3)}
  | expressionB0 ARROW expressionC0                { ArrowExpr($1, $3)}
// Command
expressionC0:
  | IF expressionGC0 FI                            { IfExpr($2)}
  | DO expressionGC0 OD                            { DoExpr($2)}
  | X LBRAC expressionA0 RBRAC ASSIGN expressionA0        { ArrayAssignExpr($1,$3, $6)}
  | X ASSIGN expressionA0                          { AssignExpr($1, $3)}
  | SKIP                                           { SkipExpr("skip")}
  | expressionC0 SEMI_COLON expressionC0           { SemiColonExpr($1,$3)}



%%