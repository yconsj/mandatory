// The generated lexer module will start with this code
{
module GCLLexer
open FSharp.Text.Lexing
open System
// open the module that defines the tokens
open GCLParser
}



let digit       = ['0'-'9']
let num         = digit+ ( '.' digit+)?  ('E' ('+'|'-')? digit+ )?
let x           = ['a'-'z' 'A'-'Z']['a'-'z' 'A'-'Z']*
let bool        = "true" | "false"
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'

// We define now the rules for recognising and building tokens
// for each of the tokens of our language we need a rule
// NOTE: rules are applied in order top-down.
//This is important when tokens overlap (Why x is the lowest, so "false" wont be treated like a variable but a boolean)
// NOTE: x is a string variable, but it is also what we use to define an array A
rule tokenize = parse
// deal with tokens that need to be ignored (skip them)
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }

// deal with tokens that need to be built
| num           { NUM(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| bool { BOOL(bool.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| '('           { B_LPAR }
| ')'           { B_RPAR }



| '*'           { TIMES }
| '/'           { DIV }
| '+'           { PLUS }
| '-'           { MINUS }
| '^'           { POW }
| '('           { LPAR }
| ')'           { RPAR }
| '%'           { MOD }
| eof           { EOF }

//bool tokens

| '&'           { OR }
| '|'           { AND }
| "||"          { COND_OR }
| "&&"          { COND_AND }
| '!'           { NOT }
| '='           { EQUAL }
| "!="          { NOT_EQUAL }
| '>'           { GREATER }
| '<'           { SMALLER }
| ">="          { EQ_GREATER }
| "<="          { EQ_SMALLER }

//HC symbols
//| ':'           { COLON }
//| '['           { HC_LBRAC }
//| ']'           { HC_RBRAC }

//GC
| "->"          { ARROW }

| '['           { LBRAC }
| ']'           { RBRAC }
// C
| '['           { C_LBRAC}
| ']'           { C_RBRAC}
| ":="          { ASSIGN }
| "skip"        { SKIP }
| ';'           { SEMI_COLON}
| "if"            { IF }
| "fi"            { FI }
| "do"            { DO }
| "od"            { OD }
//| "continue"      { CONTINUE }
//| "break"         { BREAK }
//| "try"           { TRY }
//| "catch"         { CATCH }
//| "yrt"           { YRT } 
//| "throw"         { THROW }
| "[]"           { GC_BRAC}


| x             { X((LexBuffer<_>.LexemeString lexbuf))}