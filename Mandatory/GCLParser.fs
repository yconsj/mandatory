// Implementation file for parser generated by fsyacc
module GCLParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "GCLParser.fsp"

open GCLTypesAST

# 10 "GCLParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | OR
  | AND
  | NOT
  | EQUAL
  | NOT_EQUAL
  | GREATER
  | SMALLER
  | EQ_GREATER
  | EQ_SMALLER
  | B_LPAR
  | B_RPAR
  | LBRAC
  | RBRAC
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | MOD
  | EOF
  | BOOL of (bool)
  | NUM of (float)
  | X of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_NOT
    | TOKEN_EQUAL
    | TOKEN_NOT_EQUAL
    | TOKEN_GREATER
    | TOKEN_SMALLER
    | TOKEN_EQ_GREATER
    | TOKEN_EQ_SMALLER
    | TOKEN_B_LPAR
    | TOKEN_B_RPAR
    | TOKEN_LBRAC
    | TOKEN_RBRAC
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_MOD
    | TOKEN_EOF
    | TOKEN_BOOL
    | TOKEN_NUM
    | TOKEN_X
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expressionb0
    | NONTERM_expressionb1
    | NONTERM_expressionb2
    | NONTERM_expression0
    | NONTERM_expression1
    | NONTERM_expression2
    | NONTERM_expression3

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | OR  -> 0 
  | AND  -> 1 
  | NOT  -> 2 
  | EQUAL  -> 3 
  | NOT_EQUAL  -> 4 
  | GREATER  -> 5 
  | SMALLER  -> 6 
  | EQ_GREATER  -> 7 
  | EQ_SMALLER  -> 8 
  | B_LPAR  -> 9 
  | B_RPAR  -> 10 
  | LBRAC  -> 11 
  | RBRAC  -> 12 
  | TIMES  -> 13 
  | DIV  -> 14 
  | PLUS  -> 15 
  | MINUS  -> 16 
  | POW  -> 17 
  | LPAR  -> 18 
  | RPAR  -> 19 
  | MOD  -> 20 
  | EOF  -> 21 
  | BOOL _ -> 22 
  | NUM _ -> 23 
  | X _ -> 24 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_OR 
  | 1 -> TOKEN_AND 
  | 2 -> TOKEN_NOT 
  | 3 -> TOKEN_EQUAL 
  | 4 -> TOKEN_NOT_EQUAL 
  | 5 -> TOKEN_GREATER 
  | 6 -> TOKEN_SMALLER 
  | 7 -> TOKEN_EQ_GREATER 
  | 8 -> TOKEN_EQ_SMALLER 
  | 9 -> TOKEN_B_LPAR 
  | 10 -> TOKEN_B_RPAR 
  | 11 -> TOKEN_LBRAC 
  | 12 -> TOKEN_RBRAC 
  | 13 -> TOKEN_TIMES 
  | 14 -> TOKEN_DIV 
  | 15 -> TOKEN_PLUS 
  | 16 -> TOKEN_MINUS 
  | 17 -> TOKEN_POW 
  | 18 -> TOKEN_LPAR 
  | 19 -> TOKEN_RPAR 
  | 20 -> TOKEN_MOD 
  | 21 -> TOKEN_EOF 
  | 22 -> TOKEN_BOOL 
  | 23 -> TOKEN_NUM 
  | 24 -> TOKEN_X 
  | 27 -> TOKEN_end_of_input
  | 25 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expressionb0 
    | 3 -> NONTERM_expressionb0 
    | 4 -> NONTERM_expressionb0 
    | 5 -> NONTERM_expressionb0 
    | 6 -> NONTERM_expressionb1 
    | 7 -> NONTERM_expressionb1 
    | 8 -> NONTERM_expressionb1 
    | 9 -> NONTERM_expressionb2 
    | 10 -> NONTERM_expressionb2 
    | 11 -> NONTERM_expressionb2 
    | 12 -> NONTERM_expressionb2 
    | 13 -> NONTERM_expressionb2 
    | 14 -> NONTERM_expressionb2 
    | 15 -> NONTERM_expression0 
    | 16 -> NONTERM_expression0 
    | 17 -> NONTERM_expression0 
    | 18 -> NONTERM_expression1 
    | 19 -> NONTERM_expression1 
    | 20 -> NONTERM_expression1 
    | 21 -> NONTERM_expression1 
    | 22 -> NONTERM_expression2 
    | 23 -> NONTERM_expression2 
    | 24 -> NONTERM_expression3 
    | 25 -> NONTERM_expression3 
    | 26 -> NONTERM_expression3 
    | 27 -> NONTERM_expression3 
    | 28 -> NONTERM_expression3 
    | 29 -> NONTERM_expression3 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 27 
let _fsyacc_tagOfErrorTerminal = 25

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | OR  -> "OR" 
  | AND  -> "AND" 
  | NOT  -> "NOT" 
  | EQUAL  -> "EQUAL" 
  | NOT_EQUAL  -> "NOT_EQUAL" 
  | GREATER  -> "GREATER" 
  | SMALLER  -> "SMALLER" 
  | EQ_GREATER  -> "EQ_GREATER" 
  | EQ_SMALLER  -> "EQ_SMALLER" 
  | B_LPAR  -> "B_LPAR" 
  | B_RPAR  -> "B_RPAR" 
  | LBRAC  -> "LBRAC" 
  | RBRAC  -> "RBRAC" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | MOD  -> "MOD" 
  | EOF  -> "EOF" 
  | BOOL _ -> "BOOL" 
  | NUM _ -> "NUM" 
  | X _ -> "X" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | OR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOT_EQUAL  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | SMALLER  -> (null : System.Object) 
  | EQ_GREATER  -> (null : System.Object) 
  | EQ_SMALLER  -> (null : System.Object) 
  | B_LPAR  -> (null : System.Object) 
  | B_RPAR  -> (null : System.Object) 
  | LBRAC  -> (null : System.Object) 
  | RBRAC  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | X _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 5us; 65535us; 0us; 2us; 8us; 4us; 9us; 5us; 10us; 6us; 13us; 7us; 5us; 65535us; 0us; 11us; 8us; 11us; 9us; 11us; 10us; 11us; 13us; 11us; 5us; 65535us; 0us; 15us; 8us; 15us; 9us; 15us; 10us; 15us; 13us; 15us; 15us; 65535us; 0us; 16us; 8us; 16us; 9us; 16us; 10us; 16us; 13us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 33us; 29us; 34us; 30us; 52us; 31us; 54us; 32us; 18us; 65535us; 0us; 35us; 8us; 35us; 9us; 35us; 10us; 35us; 13us; 35us; 17us; 35us; 19us; 35us; 21us; 35us; 23us; 35us; 25us; 35us; 27us; 35us; 33us; 35us; 34us; 35us; 39us; 36us; 40us; 37us; 41us; 38us; 52us; 35us; 54us; 35us; 19us; 65535us; 0us; 42us; 8us; 42us; 9us; 42us; 10us; 42us; 13us; 42us; 17us; 42us; 19us; 42us; 21us; 42us; 23us; 42us; 25us; 42us; 27us; 42us; 33us; 42us; 34us; 42us; 39us; 42us; 40us; 42us; 41us; 42us; 44us; 45us; 52us; 42us; 54us; 42us; 21us; 65535us; 0us; 43us; 8us; 43us; 9us; 43us; 10us; 43us; 13us; 43us; 17us; 43us; 19us; 43us; 21us; 43us; 23us; 43us; 25us; 43us; 27us; 43us; 33us; 43us; 34us; 43us; 39us; 43us; 40us; 43us; 41us; 43us; 44us; 43us; 46us; 47us; 48us; 49us; 52us; 43us; 54us; 43us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 9us; 15us; 21us; 37us; 56us; 76us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 3us; 1us; 2us; 3us; 1us; 1us; 3us; 2us; 2us; 3us; 3us; 2us; 3us; 3us; 3us; 2us; 3us; 4us; 3us; 2us; 3us; 7us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 8us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 1us; 9us; 3us; 9us; 15us; 16us; 1us; 10us; 3us; 10us; 15us; 16us; 1us; 11us; 3us; 11us; 15us; 16us; 1us; 12us; 3us; 12us; 15us; 16us; 1us; 13us; 3us; 13us; 15us; 16us; 1us; 14us; 3us; 14us; 15us; 16us; 3us; 15us; 15us; 16us; 3us; 15us; 16us; 16us; 3us; 15us; 16us; 28us; 3us; 15us; 16us; 29us; 1us; 15us; 1us; 16us; 4us; 17us; 18us; 19us; 20us; 4us; 18us; 18us; 19us; 20us; 4us; 18us; 19us; 19us; 20us; 4us; 18us; 19us; 20us; 20us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 2us; 22us; 23us; 1us; 22us; 1us; 22us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 26us; 2us; 27us; 29us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 8us; 10us; 14us; 18us; 22us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 51us; 53us; 57us; 59us; 63us; 65us; 69us; 71us; 75us; 77us; 81us; 83us; 87us; 91us; 95us; 99us; 103us; 105us; 107us; 112us; 117us; 122us; 127us; 129us; 131us; 133us; 135us; 138us; 140us; 142us; 144us; 146us; 148us; 150us; 152us; 155us; 157us; 159us; 161us; |]
let _fsyacc_action_rows = 56
let _fsyacc_actionTableElements = [|8us; 32768us; 2us; 10us; 9us; 13us; 15us; 46us; 16us; 48us; 18us; 52us; 22us; 12us; 23us; 50us; 24us; 51us; 0us; 49152us; 3us; 32768us; 0us; 9us; 1us; 8us; 21us; 3us; 0us; 16385us; 2us; 16386us; 0us; 9us; 1us; 8us; 2us; 16387us; 0us; 9us; 1us; 8us; 2us; 16388us; 0us; 9us; 1us; 8us; 3us; 32768us; 0us; 9us; 1us; 8us; 10us; 14us; 8us; 32768us; 2us; 10us; 9us; 13us; 15us; 46us; 16us; 48us; 18us; 52us; 22us; 12us; 23us; 50us; 24us; 51us; 8us; 32768us; 2us; 10us; 9us; 13us; 15us; 46us; 16us; 48us; 18us; 52us; 22us; 12us; 23us; 50us; 24us; 51us; 8us; 32768us; 2us; 10us; 9us; 13us; 15us; 46us; 16us; 48us; 18us; 52us; 22us; 12us; 23us; 50us; 24us; 51us; 0us; 16389us; 0us; 16390us; 8us; 32768us; 2us; 10us; 9us; 13us; 15us; 46us; 16us; 48us; 18us; 52us; 22us; 12us; 23us; 50us; 24us; 51us; 0us; 16391us; 0us; 16392us; 8us; 32768us; 3us; 25us; 4us; 27us; 5us; 17us; 6us; 21us; 7us; 19us; 8us; 23us; 15us; 33us; 16us; 34us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 2us; 16393us; 15us; 33us; 16us; 34us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 2us; 16394us; 15us; 33us; 16us; 34us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 2us; 16395us; 15us; 33us; 16us; 34us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 2us; 16396us; 15us; 33us; 16us; 34us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 2us; 16397us; 15us; 33us; 16us; 34us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 2us; 16398us; 15us; 33us; 16us; 34us; 2us; 16399us; 15us; 33us; 16us; 34us; 2us; 16400us; 15us; 33us; 16us; 34us; 3us; 32768us; 15us; 33us; 16us; 34us; 19us; 53us; 3us; 32768us; 12us; 55us; 15us; 33us; 16us; 34us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 3us; 16401us; 13us; 39us; 14us; 40us; 20us; 41us; 3us; 16402us; 13us; 39us; 14us; 40us; 20us; 41us; 3us; 16403us; 13us; 39us; 14us; 40us; 20us; 41us; 3us; 16404us; 13us; 39us; 14us; 40us; 20us; 41us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 0us; 16405us; 1us; 16407us; 17us; 44us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 0us; 16406us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 0us; 16408us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 0us; 16409us; 0us; 16410us; 1us; 16411us; 11us; 54us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 0us; 16412us; 5us; 32768us; 15us; 46us; 16us; 48us; 18us; 52us; 23us; 50us; 24us; 51us; 0us; 16413us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 9us; 10us; 14us; 15us; 18us; 21us; 24us; 28us; 37us; 46us; 55us; 56us; 57us; 66us; 67us; 68us; 77us; 83us; 86us; 92us; 95us; 101us; 104us; 110us; 113us; 119us; 122us; 128us; 131us; 134us; 137us; 141us; 145us; 151us; 157us; 161us; 165us; 169us; 173us; 179us; 185us; 191us; 192us; 194us; 200us; 201us; 207us; 208us; 214us; 215us; 216us; 218us; 224us; 225us; 231us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 2us; 1us; 1us; 3us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 3us; 1us; 3us; 1us; 2us; 2us; 1us; 1us; 3us; 4us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 16390us; 65535us; 16391us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 16406us; 65535us; 16408us; 65535us; 16409us; 16410us; 65535us; 65535us; 16412us; 65535us; 16413us; |]
let _fsyacc_reductions ()  =    [| 
# 246 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 255 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "GCLParser.fsp"
                                                           _1 
                   )
# 34 "GCLParser.fsp"
                 : boolExpr));
# 266 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "GCLParser.fsp"
                                                             AndExpr(_1,_3)
                   )
# 44 "GCLParser.fsp"
                 : boolExpr));
# 278 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "GCLParser.fsp"
                                                             OrExpr(_1,_3)
                   )
# 45 "GCLParser.fsp"
                 : boolExpr));
# 290 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "GCLParser.fsp"
                                                              NotExpr(_2)
                   )
# 46 "GCLParser.fsp"
                 : boolExpr));
# 301 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "GCLParser.fsp"
                                                              _1
                   )
# 47 "GCLParser.fsp"
                 : boolExpr));
# 312 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "GCLParser.fsp"
                                                              Bool(_1)
                   )
# 50 "GCLParser.fsp"
                 : boolExpr));
# 323 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "GCLParser.fsp"
                                                               _2 
                   )
# 51 "GCLParser.fsp"
                 : boolExpr));
# 334 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "GCLParser.fsp"
                                                              _1
                   )
# 52 "GCLParser.fsp"
                 : boolExpr));
# 345 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "GCLParser.fsp"
                                                              GreaterExpr(_1,_3)
                   )
# 55 "GCLParser.fsp"
                 : boolExpr));
# 357 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "GCLParser.fsp"
                                                                 EqGreaterExpr(_1,_3)
                   )
# 56 "GCLParser.fsp"
                 : boolExpr));
# 369 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "GCLParser.fsp"
                                                              SmallerExpr(_1,_3)
                   )
# 57 "GCLParser.fsp"
                 : boolExpr));
# 381 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "GCLParser.fsp"
                                                                 EqSmallerExpr(_1,_3)
                   )
# 58 "GCLParser.fsp"
                 : boolExpr));
# 393 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "GCLParser.fsp"
                                                              EqualExpr(_1,_3)
                   )
# 59 "GCLParser.fsp"
                 : boolExpr));
# 405 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "GCLParser.fsp"
                                                              NotEqualExpr(_1,_3)
                   )
# 60 "GCLParser.fsp"
                 : boolExpr));
# 417 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "GCLParser.fsp"
                                                           PlusExpr(_1,_3) 
                   )
# 64 "GCLParser.fsp"
                 : arithmeticExpr));
# 429 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "GCLParser.fsp"
                                                           MinusExpr(_1,_3) 
                   )
# 65 "GCLParser.fsp"
                 : arithmeticExpr));
# 441 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "GCLParser.fsp"
                                                           _1 
                   )
# 66 "GCLParser.fsp"
                 : arithmeticExpr));
# 452 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "GCLParser.fsp"
                                                           TimesExpr(_1,_3) 
                   )
# 69 "GCLParser.fsp"
                 : arithmeticExpr));
# 464 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "GCLParser.fsp"
                                                           DivExpr(_1,_3) 
                   )
# 70 "GCLParser.fsp"
                 : arithmeticExpr));
# 476 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "GCLParser.fsp"
                                                           ModExpr(_1,_3) 
                   )
# 71 "GCLParser.fsp"
                 : arithmeticExpr));
# 488 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "GCLParser.fsp"
                                                           _1 
                   )
# 72 "GCLParser.fsp"
                 : arithmeticExpr));
# 499 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "GCLParser.fsp"
                                                           PowExpr(_1,_3) 
                   )
# 75 "GCLParser.fsp"
                 : arithmeticExpr));
# 511 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "GCLParser.fsp"
                                                           _1 
                   )
# 76 "GCLParser.fsp"
                 : arithmeticExpr));
# 522 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "GCLParser.fsp"
                                                          UPlusExpr(_2) 
                   )
# 79 "GCLParser.fsp"
                 : arithmeticExpr));
# 533 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "GCLParser.fsp"
                                                          UMinusExpr(_2) 
                   )
# 80 "GCLParser.fsp"
                 : arithmeticExpr));
# 544 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "GCLParser.fsp"
                                                          Num(_1) 
                   )
# 81 "GCLParser.fsp"
                 : arithmeticExpr));
# 555 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "GCLParser.fsp"
                                                          Var(_1)
                   )
# 82 "GCLParser.fsp"
                 : arithmeticExpr));
# 566 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "GCLParser.fsp"
                                                          _2 
                   )
# 83 "GCLParser.fsp"
                 : arithmeticExpr));
# 577 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "GCLParser.fsp"
                                                            ArrayExpr(_1,_3) 
                   )
# 84 "GCLParser.fsp"
                 : arithmeticExpr));
|]
# 590 "GCLParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 28;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : boolExpr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
