// Signature file for parser generated by fsyacc
module GCLParser
type token = 
  | ASSIGN
  | C_LBRAC
  | C_RBRAC
  | GC_BRAC
  | COLON
  | ARROW
  | SKIP
  | SEMI_COLON
  | IF
  | FI
  | DO
  | OD
  | CONTINUE
  | BREAK
  | TRY
  | CATCH
  | YRT
  | THROW
  | HC_RBRAC
  | HC_LBRAC
  | COND_AND
  | COND_OR
  | OR
  | AND
  | NOT
  | EQUAL
  | NOT_EQUAL
  | GREATER
  | SMALLER
  | EQ_GREATER
  | EQ_SMALLER
  | B_LPAR
  | B_RPAR
  | LBRAC
  | RBRAC
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | MOD
  | EOF
  | ERR of (string)
  | BOOL of (bool)
  | NUM of (float)
  | X of (string)
type tokenId = 
    | TOKEN_ASSIGN
    | TOKEN_C_LBRAC
    | TOKEN_C_RBRAC
    | TOKEN_GC_BRAC
    | TOKEN_COLON
    | TOKEN_ARROW
    | TOKEN_SKIP
    | TOKEN_SEMI_COLON
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_CONTINUE
    | TOKEN_BREAK
    | TOKEN_TRY
    | TOKEN_CATCH
    | TOKEN_YRT
    | TOKEN_THROW
    | TOKEN_HC_RBRAC
    | TOKEN_HC_LBRAC
    | TOKEN_COND_AND
    | TOKEN_COND_OR
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_NOT
    | TOKEN_EQUAL
    | TOKEN_NOT_EQUAL
    | TOKEN_GREATER
    | TOKEN_SMALLER
    | TOKEN_EQ_GREATER
    | TOKEN_EQ_SMALLER
    | TOKEN_B_LPAR
    | TOKEN_B_RPAR
    | TOKEN_LBRAC
    | TOKEN_RBRAC
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_MOD
    | TOKEN_EOF
    | TOKEN_ERR
    | TOKEN_BOOL
    | TOKEN_NUM
    | TOKEN_X
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expressionB0
    | NONTERM_expressionB1
    | NONTERM_expressionB2
    | NONTERM_expressionA0
    | NONTERM_expressionA1
    | NONTERM_expressionA2
    | NONTERM_expressionA3
    | NONTERM_expressionGC0
    | NONTERM_expressionC0
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (CExpr) 
