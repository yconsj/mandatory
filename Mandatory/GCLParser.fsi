// Signature file for parser generated by fsyacc
module GCLParser
type token = 
  | OR
  | AND
  | NOT
  | EQUAL
  | NOT_EQUAL
  | GREATER
  | SMALLER
  | EQ_GREATER
  | EQ_SMALLER
  | B_LPAR
  | B_RPAR
  | LBRAC
  | RBRAC
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | MOD
  | EOF
  | BOOL of (bool)
  | NUM of (float)
  | X of (string)
type tokenId = 
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_NOT
    | TOKEN_EQUAL
    | TOKEN_NOT_EQUAL
    | TOKEN_GREATER
    | TOKEN_SMALLER
    | TOKEN_EQ_GREATER
    | TOKEN_EQ_SMALLER
    | TOKEN_B_LPAR
    | TOKEN_B_RPAR
    | TOKEN_LBRAC
    | TOKEN_RBRAC
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_MOD
    | TOKEN_EOF
    | TOKEN_BOOL
    | TOKEN_NUM
    | TOKEN_X
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expressionb0
    | NONTERM_expressionb1
    | NONTERM_expressionb2
    | NONTERM_expression0
    | NONTERM_expression1
    | NONTERM_expression2
    | NONTERM_expression3
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (boolExpr) 
